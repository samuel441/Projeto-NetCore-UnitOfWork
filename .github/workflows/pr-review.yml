name: PR Review Automation

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  review-pr:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout com hist√≥rico completo
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 2. Listar arquivos .cs alterados e codificar em base64
      - name: Get changed C# files
        id: changed_files
        run: |
          # Pega todos os arquivos alterados entre base e head da PR
          mapfile -t files < <(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          
          files_array=()
          for file in "${files[@]}"; do
            # Adiciona a regra para enviar apenas arquivos com a extens√£o .cs
            if [[ "$file" == *.cs && -f "$file" ]]; then
              content=$(base64 -w0 "$file")
              files_array+=("{\"filename\":\"$file\",\"content\":\"$content\"}")
            fi
          done

          # Monta JSON v√°lido com v√≠rgulas entre elementos
          if [ ${#files_array[@]} -gt 0 ]; then
            files_json=$(printf ",%s" "${files_array[@]}")
            files_json="[${files_json:1}]"
          else
            files_json="[]"
          fi

          echo "FILES_JSON=$(jq -c . <<< "$files_json")" >> $GITHUB_OUTPUT
          echo "Arquivos alterados enviados: $files_json"

      # 3. Montar payload JSON e chamar API
      - name: Call Review API
        id: api_call
        run: |
          JSON_PAYLOAD=$(jq -n \
            --arg title "${{ github.event.pull_request.title }}" \
            --argjson files '${{ steps.changed_files.outputs.FILES_JSON }}' \
            '{title: $title, files: $files}' \
          )
          
          echo "Payload enviado: $JSON_PAYLOAD"

          RESPONSE=$(curl -s -X POST "https://3a6b3dfe46cb.ngrok-free.app/api/v1/review_pr" \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD")
          
          echo "RESPONSE=$RESPONSE" >> $GITHUB_OUTPUT

      # 4. Comentar na PR e aprovar automaticamente se criticidade < 5
      - name: Comment & Approve PR
        uses: actions/github-script@v7
        with:
          script: |
            const response = JSON.parse(`${{ steps.api_call.outputs.RESPONSE }}`);

            if (!response.reviews || !Array.isArray(response.reviews)) {
              console.log("Nenhuma revis√£o retornada.");
              return;
            }

            let body = "ü§ñ **An√°lise Gemini**\n\n";
            let maxCriticidade = 0;

            for (const review of response.reviews) {
              body += `### üìù ${review.file}\n`;
              body += `**Feedback:** ${review.feedback}\n`;
              body += `**Criticidade:** ${review.criticidade}\n\n`;

              const criticidadeNum = parseInt(review.criticidade, 10);
              if (criticidadeNum > maxCriticidade) {
                maxCriticidade = criticidadeNum;
              }
            }

            // Comenta sempre
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body
            });

            // Aprova automaticamente se nenhuma criticidade >= 5
            if (maxCriticidade < 5) {
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                event: "APPROVE",
                body: "‚úÖ Revisado automaticamente pelo agente Gemini"
              });
            } else {
              console.log("PR n√£o aprovada automaticamente devido a criticidade alta.");
            }