name: PR Review Automation

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  review-pr:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout do c√≥digo
      - name: Checkout
        uses: actions/checkout@v3

      # 2. Listar arquivos alterados na PR
      - name: Get changed files
        id: changed_files
        run: |
          FILES_JSON=$(jq -c -n '[]')
          for file in $(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }}); do
            CONTENT=$(base64 -w0 "$file")
            FILES_JSON=$(echo $FILES_JSON | jq --arg filename "$file" --arg content "$CONTENT" '. + [{"filename": $filename, "content": $content}]')
          done
          echo "::set-output name=FILES_JSON::$FILES_JSON"

      # 3. Gerar JSON e chamar API
      - name: Call Review API
        id: api_call
        run: |
          JSON_PAYLOAD=$(jq -n \
            --arg pr_number "${{ github.event.pull_request.number }}" \
            --arg title "${{ github.event.pull_request.title }}" \
            --argjson files "${{ steps.changed_files.outputs.FILES_JSON }}" \
            '{pr_number: $pr_number, title: $title, files: $files}' | jq -c '.')
          
          RESPONSE=$(curl -s -X POST "https://3a6b3dfe46cb.ngrok-free.app/api/v1/review_pr" \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD")
          
          echo "::set-output name=response::$RESPONSE"

      # 4. Comentar na PR e aprovar automaticamente se criticidade < 5
      - name: Comment & Approve PR
        uses: actions/github-script@v7
        with:
          script: |
            const response = JSON.parse(`${{ steps.api_call.outputs.response }}`);

            if (!response.reviews || !Array.isArray(response.reviews)) {
              console.log("Nenhuma revis√£o retornada.");
              return;
            }

            let body = "ü§ñ **An√°lise Gemini**\n\n";
            let maxCriticidade = 0;

            for (const review of response.reviews) {
              body += `### üìù ${review.file}\n`;
              body += `**Feedback:** ${review.feedback}\n`;
              body += `**Criticidade:** ${review.criticidade}\n\n`;

              const criticidadeNum = parseInt(review.criticidade, 10);
              if (criticidadeNum > maxCriticidade) {
                maxCriticidade = criticidadeNum;
              }
            }

            // Comenta sempre
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body
            });

            // Aprova automaticamente se nenhuma criticidade >= 5
            if (maxCriticidade < 5) {
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                event: "APPROVE",
                body: "‚úÖ Revisado automaticamente pelo agente Gemini"
              });
            } else {
              console.log("PR n√£o aprovada automaticamente devido a criticidade alta.");
            }
