name: PR Pre-Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  analyze-pr:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Get changed C# files with content
        id: files
        run: |
          BASE_BRANCH="${{ github.event.pull_request.base.ref }}"
          HEAD_BRANCH="${{ github.event.pull_request.head.ref }}"

          git fetch origin $BASE_BRANCH $HEAD_BRANCH
          MERGE_BASE=$(git merge-base origin/$BASE_BRANCH origin/$HEAD_BRANCH)
          FILES=$(git diff --name-only $MERGE_BASE origin/$HEAD_BRANCH)

          FILES_JSON="["
          for f in $FILES; do
            # Só arquivos .cs
            if [[ -f "$f" && "$f" == *.cs ]]; then
              CONTENT=$(jq -Rs . < "$f")
              FILES_JSON="${FILES_JSON}{\"filename\":\"$f\",\"content\":$CONTENT},"
            fi
          done
          FILES_JSON="${FILES_JSON%,}]"  # remove última vírgula
          echo "files=$FILES_JSON" >> $GITHUB_OUTPUT

      - name: Send data to Gemini
        id: analysis
        run: |
          # Salva os arquivos em JSON em um arquivo temporário
          echo "${{ steps.files.outputs.files }}" > files.json

          # Monta o payload de forma segura
          JSON_PAYLOAD=$(jq -n \
            --arg pr_number "${{ github.event.pull_request.number }}" \
            --arg title "${{ github.event.pull_request.title }}" \
            --slurpfile files files.json \
            '{pr_number: $pr_number, title: $title, files: $files[0]}')

          RESPONSE=$(curl -s -X POST "https://3a6b3dfe46cb.ngrok-free.app/api/v1/review_pr" \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD")
          
          echo "response=$RESPONSE" >> $GITHUB_OUTPUT

      - name: Comment analysis and approve if safe
        uses: actions/github-script@v7
        with:
          script: |
            const response = JSON.parse(`${{ steps.analysis.outputs.response }}`);

            let body = "🤖 **Análise Gemini**\n\n";
            let maxCriticidade = 0;

            for (const review of response.reviews) {
              body += `### 📝 ${review.file}\n`;
              body += `**Feedback:** ${review.feedback}\n`;
              body += `**Criticidade:** ${review.criticidade}\n\n`;

              const criticidadeNum = parseInt(review.criticidade, 10);
              if (criticidadeNum > maxCriticidade) {
                maxCriticidade = criticidadeNum;
              }
            }

            // Comenta sempre
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body
            });

            // Aprova automaticamente se nenhuma criticidade >= 5
            if (maxCriticidade < 5) {
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                event: "APPROVE",
                body: "✅ Revisado automaticamente pelo agente Gemini"
              });
            } else {
              console.log("PR não aprovado automaticamente devido a criticidade alta.");
            }
