name: PR Pre-Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  analyze-pr:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Get changed files
        id: files
        uses: actions/github-script@v7
        with:
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
            });
            const filenames = files.map(f => f.filename);
            core.setOutput("files", JSON.stringify(filenames));

      - name: Send data to Gemini
        id: analysis
        run: |
          echo "Chamando Gemini..."
          FILES_JSON='${{ steps.files.outputs.files }}'
          RESPONSE=$(curl -s -X POST "https://09bc5f1bf54c.ngrok-free.app/api/analyze/analyze" \
            -H "Content-Type: application/json" \
            -d "{
              \"pr_number\": \"${{ github.event.pull_request.number }}\",
              \"title\": \"${{ github.event.pull_request.title }}\",
              \"files\": $FILES_JSON
            }")
          echo "response=$RESPONSE" >> $GITHUB_OUTPUT

      - name: Comment analysis
        uses: actions/github-script@v7
        env:
          ANALYSIS_RESPONSE: ${{ steps.analysis.outputs.response }}
        with:
          script: |
            const analysis = JSON.parse(process.env.ANALYSIS_RESPONSE);
            const body = `ðŸ¤– **AnÃ¡lise Gemini**
      
      **Resumo:** ${analysis.summary}
      **Risco:** ${analysis.risk}
      **Mensagem:** ${analysis.message}`;
      
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body
            });


      - name: Approve PR
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              event: "APPROVE",
              body: "âœ… Revisado automaticamente pelo agente Gemini"
            });
