name: Review .NET PR Files

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  review-pr:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Prepare JSON payload
        id: prepare_payload
        run: |
          set -euo pipefail

          PR_NUMBER=${{ github.event.pull_request.number }}
          BASE_BRANCH=${{ github.event.pull_request.base.ref }}
          HEAD_BRANCH=${{ github.event.pull_request.head.ref }}

          git fetch origin $BASE_BRANCH $HEAD_BRANCH
          MERGE_BASE=$(git merge-base origin/$BASE_BRANCH origin/$HEAD_BRANCH)
          FILES=$(git diff --name-only $MERGE_BASE origin/$HEAD_BRANCH || true)

          FILES_JSON=$(jq -n '[]')

          for f in $FILES; do
            if [[ -f "$f" && "$f" == *.cs ]]; then
              SIZE=$(stat -c%s "$f")
              if [[ "$SIZE" -gt 0 ]]; then
                CONTENT_BASE64=$(base64 "$f" | tr -d '\n')
                FILE_OBJ=$(jq -n --arg fn "$f" --arg ct "$CONTENT_BASE64" '{filename: $fn, content: $ct}')
                FILES_JSON=$(jq --argjson fobj "$FILE_OBJ" '. += [$fobj]' <<< "$FILES_JSON")
              fi
            fi
          done

          JSON_PAYLOAD=$(jq -n \
            --arg pr_number "$PR_NUMBER" \
            --arg title "PR review files" \
            --argjson files "$FILES_JSON" \
            '{pr_number: $pr_number, title: $title, files: $files}' | jq -c '.')

          echo "json_payload<<EOF" >> $GITHUB_OUTPUT
          echo "$JSON_PAYLOAD" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Send payload to Gemini endpoint
        id: analysis
        run: |
          RESPONSE=$(curl -s -X POST "https://3a6b3dfe46cb.ngrok-free.app/api/v1/review_pr" \
            -H "Content-Type: application/json" \
            -d "${{ steps.prepare_payload.outputs.json_payload }}")
          echo "response<<EOF" >> $GITHUB_OUTPUT
          echo "$RESPONSE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Comment and auto-approve PR based on Gemini analysis
        uses: actions/github-script@v7
        with:
          script: |
            const response = JSON.parse(`${{ steps.analysis.outputs.response }}`);

            let body = "🤖 **Análise Gemini**\n\n";
            let maxCriticidade = 0;

            for (const review of response.reviews) {
              body += `### 📝 ${review.file}\n`;
              body += `**Feedback:** ${review.feedback}\n`;
              body += `**Criticidade:** ${review.criticidade}\n\n`;

              const criticidadeNum = parseInt(review.criticidade, 10);
              if (criticidadeNum > maxCriticidade) {
                maxCriticidade = criticidadeNum;
              }
            }

            // Comenta sempre
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body
            });

            // Aprova automaticamente se nenhuma criticidade >= 5
            if (maxCriticidade < 5) {
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                event: "APPROVE",
                body: "✅ Revisado automaticamente pelo agente Gemini"
              });
            } else {
              console.log("PR não aprovado automaticamente devido a criticidade alta.");
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
