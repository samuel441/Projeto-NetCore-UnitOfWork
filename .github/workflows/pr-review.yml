name: PR Auto Review with Gemini

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  review:
    runs-on: ubuntu-latest
    env:
      API_URL: https://3a6b3dfe46cb.ngrok-free.app/api/v1/review_pr

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get changed files
        id: changed_files
        run: |
          FILES_JSON="["
          FIRST=true
          for f in $(git diff --name-only origin/${{ github.event.pull_request.base.ref }} ${{ github.sha }}); do
            CONTENT=$(base64 -w 0 "$f")
            if [ "$FIRST" = true ]; then
              FIRST=false
            else
              FILES_JSON+=","
            fi
            FILES_JSON+="{\"filename\":\"$f\",\"content\":\"$CONTENT\"}"
          done
          FILES_JSON+="]"
          echo "FILES_JSON=$FILES_JSON" >> $GITHUB_OUTPUT

      - name: Create JSON payload
        id: payload
        run: |
          # Converte o output em JSON real para o --argjson
          FILES_JSON_VALID=$(echo '${{ steps.changed_files.outputs.FILES_JSON }}' | jq .)
          JSON_PAYLOAD=$(jq -n \
            --arg pr_number "${{ github.event.pull_request.number }}" \
            --arg title "${{ github.event.pull_request.title }}" \
            --argjson files "$FILES_JSON_VALID" \
            '{pr_number: $pr_number, title: $title, files: $files}' | jq -c '.')
          echo "JSON_PAYLOAD=$JSON_PAYLOAD" >> $GITHUB_OUTPUT

      - name: Call review API
        id: analysis
        run: |
          RESPONSE=$(curl -s -X POST "$API_URL" \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD")
          echo "response=$RESPONSE" >> $GITHUB_OUTPUT

      - name: Comment and approve PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const response = JSON.parse(`${{ steps.analysis.outputs.response }}`);

            if (!response.reviews || !Array.isArray(response.reviews)) {
              console.log("No reviews returned from API.");
              return;
            }

            let body = "🤖 **Análise Gemini**\n\n";
            let maxCriticidade = 0;

            for (const review of response.reviews) {
              body += `### 📝 ${review.file}\n`;
              body += `**Feedback:** ${review.feedback}\n`;
              body += `**Criticidade:** ${review.criticidade}\n\n`;

              const criticidadeNum = parseInt(review.criticidade, 10);
              if (criticidadeNum > maxCriticidade) {
                maxCriticidade = criticidadeNum;
              }
            }

            // Sempre comenta na PR
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body
            });

            // Aprova automaticamente se nenhuma criticidade >= 5
            if (maxCriticidade < 5) {
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                event: "APPROVE",
                body: "✅ Revisado automaticamente pelo agente Gemini"
              });
            } else {
              console.log("PR não aprovada automaticamente devido a criticidade alta.");
            }
