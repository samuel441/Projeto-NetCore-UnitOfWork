name: PR Review Gemini

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  review:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set PR info
      run: |
        echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
        echo "BASE_BRANCH=${{ github.event.pull_request.base.ref }}" >> $GITHUB_ENV
        echo "HEAD_BRANCH=${{ github.event.pull_request.head.ref }}" >> $GITHUB_ENV

    - name: Get changed .cs files
      id: changed_files
      run: |
        git fetch origin $BASE_BRANCH $HEAD_BRANCH
        MERGE_BASE=$(git merge-base origin/$BASE_BRANCH origin/$HEAD_BRANCH)
        FILES=$(git diff --name-only $MERGE_BASE origin/$HEAD_BRANCH)
        
        FILES_JSON=$(jq -n '[]')
        for f in $FILES; do
          if [[ -f "$f" && "$f" == *.cs ]]; then
            CONTENT_BASE64=$(base64 "$f" | tr -d '\n')
            FILE_OBJ=$(jq -n --arg fn "$f" --arg ct "$CONTENT_BASE64" '{filename: $fn, content: $ct}')
            FILES_JSON=$(jq --argjson fobj "$FILE_OBJ" '. += [$fobj]' <<< "$FILES_JSON")
          fi
        done
        
        echo "FILES_JSON=$(jq -c '.' <<< "$FILES_JSON")" >> $GITHUB_OUTPUT

    - name: Call Review API
      id: analysis
      run: |
        JSON_PAYLOAD=$(jq -n \
          --arg pr_number "$PR_NUMBER" \
          --arg title "${{ github.event.pull_request.title }}" \
          --argjson files "${{ steps.changed_files.outputs.FILES_JSON }}" \
          '{pr_number: $pr_number, title: $title, files: $files}' | jq -c '.')
        
        RESPONSE=$(curl -s -X POST "https://3a6b3dfe46cb.ngrok-free.app/api/v1/review_pr" \
          -H "Content-Type: application/json" \
          -d "$JSON_PAYLOAD")
        
        echo "response=$RESPONSE" >> $GITHUB_OUTPUT

    - name: Comment and approve PR
      uses: actions/github-script@v7
      with:
        script: |
          const response = JSON.parse(`${{ steps.analysis.outputs.response }}`);

          let body = "🤖 **Análise Gemini**\n\n";
          let maxCriticidade = 0;

          for (const review of response.reviews) {
            body += `### 📝 ${review.file}\n`;
            body += `**Feedback:** ${review.feedback}\n`;
            body += `**Criticidade:** ${review.criticidade}\n\n`;

            const criticidadeNum = parseInt(review.criticidade, 10);
            if (criticidadeNum > maxCriticidade) {
              maxCriticidade = criticidadeNum;
            }
          }

          // Comenta sempre
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.payload.pull_request.number,
            body
          });

          // Aprova automaticamente se nenhuma criticidade >= 5
          if (maxCriticidade < 5) {
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              event: "APPROVE",
              body: "✅ Revisado automaticamente pelo agente Gemini"
            });
          } else {
            console.log("PR não aprovado automaticamente devido a criticidade alta.");
          }
