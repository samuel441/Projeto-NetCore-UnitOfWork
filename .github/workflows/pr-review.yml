name: Review PR

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  review:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup jq
        run: sudo apt-get install -y jq

      - name: Prepare JSON payload
        shell: bash
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          BASE_BRANCH=${{ github.event.pull_request.base.ref }}
          HEAD_BRANCH=${{ github.event.pull_request.head.ref }}

          # Obt√©m o merge base e lista de arquivos modificados
          git fetch origin $BASE_BRANCH $HEAD_BRANCH
          MERGE_BASE=$(git merge-base origin/$BASE_BRANCH origin/$HEAD_BRANCH)
          FILES=$(git diff --name-only $MERGE_BASE origin/$HEAD_BRANCH)

          # Inicializa array JSON
          FILES_JSON='[]'

          # Loop para arquivos .cs
          for f in $FILES; do
            if [[ -f "$f" && "$f" == *.cs ]]; then
              CONTENT_BASE64=$(base64 "$f" | tr -d '\n')
              FILE_OBJ=$(jq -n --arg fn "$f" --arg ct "$CONTENT_BASE64" '{filename: $fn, content: $ct}')
              FILES_JSON=$(jq --argjson fobj "$FILE_OBJ" '. += [$fobj]' <<< "$FILES_JSON")
            fi
          done

          # Monta payload final
          JSON_PAYLOAD=$(jq -n \
            --arg pr_number "$PR_NUMBER" \
            --arg title "PR review files" \
            --argjson files "$FILES_JSON" \
            '{pr_number: $pr_number, title: $title, files: $files}')

          echo "JSON payload ready:"
          echo "$JSON_PAYLOAD"

          # Salva no output para steps futuros se quiser
          echo "json_payload=$JSON_PAYLOAD" >> $GITHUB_OUTPUT

      - name: Send to Gemini
        shell: bash
        run: |
          # Usa o payload do step anterior
          curl -s -X POST "https://3a6b3dfe46cb.ngrok-free.app/api/v1/review_pr" \
            -H "Content-Type: application/json" \
            -d "${{ steps.prepare-json-payload.outputs.json_payload }}"
